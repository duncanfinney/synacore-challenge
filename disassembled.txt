[0m[[0minfo[0m] [0mLoading global plugins from /Users/duncan/.sbt/0.13/plugins[0m
[0m[[0minfo[0m] [0mLoading project definition from /Users/duncan/code/synacore-challenge/project[0m
[0m[[0minfo[0m] [0mSet current project to synacore-challenge (in build file:/Users/duncan/code/synacore-challenge/)[0m
[0m[[0minfo[0m] [0mRunning Main [0m
[0] -> Noop
[1] -> Noop
[2] -> Out(101)
[3] -> Out(108)
[4] -> Out(99)
[5] -> Out(111)
[6] -> Out(109)
[7] -> Out(101)
[8] -> Out(32)
[9] -> Out(116)
[10] -> Out(111)
[11] -> Out(32)
[12] -> Out(116)
[13] -> Out(104)
[14] -> Out(101)
[15] -> Out(32)
[16] -> Out(83)
[17] -> Out(121)
[18] -> Out(110)
[19] -> Out(97)
[20] -> Out(99)
[21] -> Out(111)
[22] -> Out(114)
[23] -> Out(32)
[24] -> Out(67)
[25] -> Out(104)
[26] -> Out(97)
[27] -> Out(108)
[28] -> Out(108)
[29] -> Out(101)
[30] -> Out(110)
[31] -> Out(103)
[32] -> Out(101)
[33] -> Out(33)
[34] -> Out(10)
[35] -> Out(80)
[36] -> Out(108)
[37] -> Out(101)
[38] -> Out(97)
[39] -> Out(115)
[40] -> Out(101)
[41] -> Out(32)
[42] -> Out(114)
[43] -> Out(101)
[44] -> Out(99)
[45] -> Out(111)
[46] -> Out(114)
[47] -> Out(100)
[48] -> Out(32)
[49] -> Out(121)
[50] -> Out(111)
[51] -> Out(117)
[52] -> Out(114)
[53] -> Out(32)
[54] -> Out(112)
[55] -> Out(114)
[56] -> Out(111)
[57] -> Out(103)
[58] -> Out(114)
[59] -> Out(101)
[60] -> Out(115)
[61] -> Out(115)
[62] -> Out(32)
[63] -> Out(98)
[64] -> Out(121)
[65] -> Out(32)
[66] -> Out(112)
[67] -> Out(117)
[68] -> Out(116)
[69] -> Out(116)
[70] -> Out(105)
[71] -> Out(110)
[72] -> Out(103)
[73] -> Out(32)
[74] -> Out(99)
[75] -> Out(111)
[76] -> Out(100)
[77] -> Out(101)
[78] -> Out(115)
[79] -> Out(32)
[80] -> Out(108)
[81] -> Out(105)
[82] -> Out(107)
[83] -> Out(101)
[84] -> Out(10)
[85] -> Out(116)
[86] -> Out(104)
[87] -> Out(105)
[88] -> Out(115)
[89] -> Out(32)
[90] -> Out(111)
[91] -> Out(110)
[92] -> Out(101)
[93] -> Out(32)
[94] -> Out(105)
[95] -> Out(110)
[96] -> Out(116)
[97] -> Out(111)
[98] -> Out(32)
[99] -> Out(116)
[100] -> Out(104)
[101] -> Out(101)
[102] -> Out(32)
[103] -> Out(99)
[104] -> Out(104)
[105] -> Out(97)
[106] -> Out(108)
[107] -> Out(108)
[108] -> Out(101)
[109] -> Out(110)
[110] -> Out(103)
[111] -> Out(101)
[112] -> Out(32)
[113] -> Out(119)
[114] -> Out(101)
[115] -> Out(98)
[116] -> Out(115)
[117] -> Out(105)
[118] -> Out(116)
[119] -> Out(101)
[120] -> Out(58)
[121] -> Out(32)
[122] -> Out(74)
[123] -> Out(70)
[124] -> Out(108)
[125] -> Out(83)
[126] -> Out(67)
[127] -> Out(105)
[128] -> Out(114)
[129] -> Out(72)
[130] -> Out(110)
[131] -> Out(85)
[132] -> Out(89)
[133] -> Out(69)
[134] -> Out(10)
[135] -> Out(10)
[136] -> Out(69)
[137] -> Out(120)
[138] -> Out(101)
[139] -> Out(99)
[140] -> Out(117)
[141] -> Out(116)
[142] -> Out(105)
[143] -> Out(110)
[144] -> Out(103)
[145] -> Out(32)
[146] -> Out(115)
[147] -> Out(101)
[148] -> Out(108)
[149] -> Out(102)
[150] -> Out(45)
[151] -> Out(116)
[152] -> Out(101)
[153] -> Out(115)
[154] -> Out(116)
[155] -> Out(46)
[156] -> Out(46)
[157] -> Out(46)
[158] -> Out(10)
[159] -> Out(10)
[160] -> Out(347)
[161] -> Jump(347)
[162] -> Out(109)
[163] -> Out(112)
[164] -> Out(32)
[165] -> Out(102)
[166] -> Out(97)
[167] -> Out(105)
[168] -> Out(108)
[169] -> Out(115)
[170] -> Out(10)
[171] -> Out(21)
[172] -> Halt
[173] -> Noop
[174] -> Noop
[175] -> Noop
[176] -> Noop
[177] -> Noop
[178] -> Noop
[179] -> Noop
[180] -> Noop
[181] -> Noop
[182] -> Jump(358)
[183] -> Jump(368)
[184] -> Jump(65421)
[185] -> Jump(65508)
[186] -> Jump(65448)
[187] -> Jump(65477)
[188] -> Noop
[189] -> Noop
[190] -> Noop
[191] -> Noop
[192] -> Out(109)
[193] -> Out(112)
[194] -> Out(32)
[195] -> Out(108)
[196] -> Out(97)
[197] -> Out(110)
[198] -> Out(100)
[199] -> Out(115)
[200] -> Out(32)
[201] -> Out(45)
[202] -> Out(50)
[203] -> Out(10)
[204] -> Out(21)
[205] -> Halt
[206] -> Noop
[207] -> Noop
[208] -> Out(109)
[209] -> Out(112)
[210] -> Out(32)
[211] -> Out(108)
[212] -> Out(97)
[213] -> Out(110)
[214] -> Out(100)
[215] -> Out(115)
[216] -> Out(32)
[217] -> Out(45)
[218] -> Out(49)
[219] -> Out(10)
[220] -> Out(21)
[221] -> Halt
[222] -> Noop
[223] -> Noop
[224] -> Out(109)
[225] -> Out(112)
[226] -> Out(32)
[227] -> Out(108)
[228] -> Out(97)
[229] -> Out(110)
[230] -> Out(100)
[231] -> Out(115)
[232] -> Out(32)
[233] -> Out(43)
[234] -> Out(49)
[235] -> Out(10)
[236] -> Out(21)
[237] -> Halt
[238] -> Noop
[239] -> Noop
[240] -> Noop
[241] -> Noop
[242] -> Out(109)
[243] -> Out(112)
[244] -> Out(32)
[245] -> Out(108)
[246] -> Out(97)
[247] -> Out(110)
[248] -> Out(100)
[249] -> Out(115)
[250] -> Out(32)
[251] -> Out(43)
[252] -> Out(50)
[253] -> Out(10)
[254] -> Out(7)
[255] -> Halt
[256] -> JumpT(0,1074)
[257] -> JumpF(1,1074)
[258] -> JumpT(1,65519)
[259] -> Jump(1074)
[260] -> JumpF(0,65524)
[261] -> Jump(1074)
[262] -> JumpT(32768,1093)
[263] -> JumpT(32769,1093)
[264] -> JumpT(32770,1093)
[265] -> JumpT(32771,1093)
[266] -> JumpT(32772,1093)
[267] -> JumpT(32773,1093)
[268] -> JumpT(32774,1093)
[269] -> JumpT(32775,1093)
[270] -> Set(32768,1)
[271] -> JumpF(32768,1118)
[272] -> Set(32768,0)
[273] -> JumpT(32768,1118)
[274] -> Add(32768,1,1)
[275] -> JumpT(32768,564)
[276] -> Out(111)
[277] -> Out(32)
[278] -> Out(97)
[279] -> Out(100)
[280] -> Out(100)
[281] -> Out(32)
[282] -> Out(111)
[283] -> Out(112)
[284] -> Out(10)
[285] -> Out(4)
[286] -> Halt
[287] -> Eq(32769,32768,2)
[288] -> JumpT(32769,590)
[289] -> Out(111)
[290] -> Out(32)
[291] -> Out(101)
[292] -> Out(113)
[293] -> Out(32)
[294] -> Out(111)
[295] -> Out(112)
[296] -> Out(10)
[297] -> Out(2)
[298] -> Halt
[299] -> Push(32768)
[300] -> Push(32769)
[301] -> Pop(32768)
[302] -> Pop(32769)
[303] -> Eq(32770,32769,2)
[304] -> JumpF(32770,65414)
[305] -> Eq(32770,32768,1)
[306] -> JumpF(32770,65414)
[307] -> Gt(32770,32769,32768)
[308] -> JumpF(32770,1139)
[309] -> Gt(32770,32768,32769)
[310] -> JumpT(32770,1139)
[311] -> Gt(32770,42,42)
[312] -> JumpT(32770,1139)
[313] -> And(32768,65520,65450)
[314] -> Eq(32769,32768,65440)
[315] -> JumpF(32769,65433)
[316] -> Or(32769,65520,65450)
[317] -> Eq(32768,32769,65530)
[318] -> JumpT(32768,65452)
[319] -> Out(111)
[320] -> Out(32)
[321] -> Out(98)
[322] -> Out(105)
[323] -> Out(116)
[324] -> Out(119)
[325] -> Out(105)
[326] -> Out(115)
[327] -> Out(101)
[328] -> Out(32)
[329] -> Out(111)
[330] -> Out(114)
[331] -> Out(10)
[332] -> Out(14)
[333] -> Halt
[334] -> Not(32768,0)
[335] -> Eq(32769,32768,65535)
[336] -> JumpF(32769,65464)
[337] -> Not(32768,21845)
[338] -> Eq(32769,32768,65450)
[339] -> JumpF(32769,65464)
[340] -> Call(1285)
[341] -> Jump(1289)
[342] -> Pop(32768)
[343] -> Eq(32769,32768,65476)
[344] -> JumpT(32769,1289)
[345] -> Eq(32769,32768,65474)
[346] -> JumpF(32769,1289)
[347] -> Set(32768,1287)
[348] -> Call(32768)
[349] -> Jump(1289)
[350] -> Pop(32768)
[351] -> Eq(32769,32768,65499)
[352] -> JumpT(32769,1289)
[353] -> Eq(32769,32768,65497)
[354] -> JumpF(32769,1289)
[355] -> Add(32768,65535,65535)
[356] -> Eq(32769,32768,65534)
[357] -> JumpF(32769,1312)
[358] -> Eq(32769,65534,32768)
[359] -> JumpF(32769,1312)
[360] -> Add(32768,16384,16384)
[361] -> JumpT(32768,1312)
[362] -> Add(32768,16384,16384)
[363] -> JumpT(32768,1312)
[364] -> Multiply(32768,6,9)
[365] -> Eq(32769,32768,42)
[366] -> JumpT(32769,1381)
[367] -> Eq(32769,32768,54)
[368] -> JumpF(32769,65414)
[369] -> Multiply(32768,12345,32123)
[370] -> Eq(32769,32768,99)
[371] -> JumpF(32769,1312)
[372] -> Modulo(32768,6,3)
[373] -> Eq(32769,32768,0)
[374] -> JumpF(32769,65437)
[375] -> Modulo(32768,70,6)
[376] -> Eq(32769,32768,4)
[377] -> JumpF(32769,65437)
[378] -> Multiply(32768,65534,15)
[379] -> Eq(32769,32768,65506)
[380] -> JumpF(32769,1312)
[381] -> Jump(845)
[382] -> RMem(32768,843)
[383] -> Eq(32769,32768,20000)
[384] -> JumpF(32769,65495)
[385] -> Add(32770,843,1)
[386] -> RMem(32768,32770)
[387] -> Eq(32769,32768,10000)
[388] -> JumpF(32769,65495)
[389] -> Set(32768,843)
[390] -> WMem(32768,30000)
[391] -> RMem(32770,32768)
[392] -> Eq(32769,32770,30000)
[393] -> JumpF(32769,65518)
[394] -> Call(65467)
[395] -> RMem(32768,65460)
[396] -> Eq(32769,32768,11)
[397] -> JumpF(32769,65495)
[398] -> Add(32770,65460,1)
[399] -> RMem(32768,32770)
[400] -> Eq(32769,32768,116)
[401] -> JumpF(32769,65495)
[402] -> WMem(32770,84)
[403] -> RMem(32768,32770)
[404] -> Eq(32769,32768,116)
[405] -> JumpT(32769,65518)
[406] -> Eq(32769,32768,84)
[407] -> JumpF(32769,65518)
[408] -> WMem(65449,21)
[409] -> WMem(65450,7)
[410] -> Jump(65453)
[411] -> Out(119)
[412] -> Out(109)
[413] -> Out(101)
[414] -> Out(109)
[415] -> Out(32)
[416] -> Out(111)
[417] -> Out(112)
[418] -> Out(119)
[419] -> Out(114)
[420] -> Out(105)
[421] -> Out(116)
[422] -> Out(101)
[423] -> Out(32)
[424] -> Out(102)
[425] -> Out(97)
[426] -> Out(105)
[427] -> Out(108)
[428] -> Out(10)
[429] -> Out(9)
[430] -> Halt
[431] -> Add(32769,10,65472)
[432] -> Add(32769,32769,1)
[433] -> RMem(32770,65508)
[434] -> Add(32770,32770,65508)
[435] -> Set(32768,65508)
[436] -> Add(32768,32768,1)
[437] -> Gt(32771,32768,32770)
[438] -> JumpT(32771,65535)
[439] -> RMem(32772,32768)
[440] -> WMem(32769,32772)
[441] -> Add(32768,32768,1)
[442] -> Add(32769,32769,1)
[443] -> Jump(65512)
[444] -> RMem(32768,65472)
[445] -> RMem(32769,65491)
[446] -> Add(32768,32768,32769)
[447] -> Add(32768,32768,1)
[448] -> WMem(65472,32768)
[449] -> WMem(65491,44)
[450] -> Set(32768,65472)
[451] -> Call(65518)
[452] -> Push(32768)
[453] -> Push(32769)
[454] -> Push(32770)
[455] -> Set(32768,65507)
[456] -> Set(32769,65531)
[457] -> Add(32770,17968,11597)
[458] -> Call(65458)
[459] -> Pop(32770)
[460] -> Pop(32769)
[461] -> Pop(32768)
[462] -> Jump(65454)
[463] -> Out(111)
[464] -> Out(32)
[465] -> Out(106)
[466] -> Out(116)
[467] -> Out(47)
[468] -> Out(106)
[469] -> Out(102)
[470] -> Out(10)
[471] -> Out(19)
[472] -> Halt
[473] -> Out(111)
[474] -> Out(110)
[475] -> Out(122)
[476] -> Out(101)
[477] -> Out(114)
[478] -> Out(111)
[479] -> Out(32)
[480] -> Out(114)
[481] -> Out(101)
[482] -> Out(103)
[483] -> Out(10)
[484] -> Out(19)
[485] -> Halt
[486] -> Out(111)
[487] -> Out(32)
[488] -> Out(115)
[489] -> Out(101)
[490] -> Out(116)
[491] -> Out(32)
[492] -> Out(111)
[493] -> Out(112)
[494] -> Out(10)
[495] -> Out(19)
[496] -> Halt
[497] -> Out(111)
[498] -> Out(32)
[499] -> Out(103)
[500] -> Out(116)
[501] -> Out(32)
[502] -> Out(111)
[503] -> Out(112)
[504] -> Out(10)
[505] -> Out(19)
[506] -> Halt
[507] -> Out(111)
[508] -> Out(32)
[509] -> Out(115)
[510] -> Out(116)
[511] -> Out(97)
[512] -> Out(99)
[513] -> Out(107)
[514] -> Out(10)
[515] -> Out(19)
[516] -> Halt
[517] -> Out(111)
[518] -> Out(32)
[519] -> Out(98)
[520] -> Out(105)
[521] -> Out(116)
[522] -> Out(119)
[523] -> Out(105)
[524] -> Out(115)
[525] -> Out(101)
[526] -> Out(32)
[527] -> Out(97)
[528] -> Out(110)
[529] -> Out(100)
[530] -> Out(10)
[531] -> Out(19)
[532] -> Halt
[533] -> Out(111)
[534] -> Out(32)
[535] -> Out(98)
[536] -> Out(105)
[537] -> Out(116)
[538] -> Out(119)
[539] -> Out(105)
[540] -> Out(115)
[541] -> Out(101)
[542] -> Out(32)
[543] -> Out(110)
[544] -> Out(111)
[545] -> Out(116)
[546] -> Out(10)
[547] -> Out(19)
[548] -> Halt
[549] -> Out(111)
[550] -> Out(32)
[551] -> Out(114)
[552] -> Out(109)
[553] -> Out(101)
[554] -> Out(109)
[555] -> Out(32)
[556] -> Out(111)
[557] -> Out(112)
[558] -> Out(10)
[559] -> Out(19)
[560] -> Halt
[561] -> Out(111)
[562] -> Out(32)
[563] -> Out(119)
[564] -> Out(109)
[565] -> Out(101)
[566] -> Out(109)
[567] -> Out(32)
[568] -> Out(111)
[569] -> Out(112)
[570] -> Out(10)
[571] -> Out(6)
[572] -> Halt
[573] -> Jump(65476)
[574] -> Jump(65499)
[575] -> Out(111)
[576] -> Out(32)
[577] -> Out(99)
[578] -> Out(97)
[579] -> Out(108)
[580] -> Out(108)
[581] -> Out(32)
[582] -> Out(111)
[583] -> Out(112)
[584] -> Out(10)
[585] -> Out(19)
[586] -> Halt
[587] -> Out(111)
[588] -> Out(32)
[589] -> Out(109)
[590] -> Out(111)
[591] -> Out(100)
[592] -> Out(117)
[593] -> Out(108)
[594] -> Out(111)
[595] -> Out(32)
[596] -> Out(109)
[597] -> Out(97)
[598] -> Out(116)
[599] -> Out(104)
[600] -> Out(32)
[601] -> Out(100)
[602] -> Out(117)
[603] -> Out(114)
[604] -> Out(105)
[605] -> Out(110)
[606] -> Out(103)
[607] -> Out(32)
[608] -> Out(97)
[609] -> Out(100)
[610] -> Out(100)
[611] -> Out(32)
[612] -> Out(111)
[613] -> Out(114)
[614] -> Out(32)
[615] -> Out(109)
[616] -> Out(117)
[617] -> Out(108)
[618] -> Out(116)
[619] -> Out(10)
[620] -> Out(19)
[621] -> Halt
[622] -> Out(111)
[623] -> Out(116)
[624] -> Out(32)
[625] -> Out(104)
[626] -> Out(105)
[627] -> Out(116)
[628] -> Out(99)
[629] -> Out(104)
[630] -> Out(104)
[631] -> Out(105)
[632] -> Out(107)
[633] -> Out(105)
[634] -> Out(110)
[635] -> Out(103)
[636] -> Out(10)
[637] -> Out(19)
[638] -> Halt
[639] -> Out(111)
[640] -> Out(32)
[641] -> Out(109)
[642] -> Out(117)
[643] -> Out(108)
[644] -> Out(116)
[645] -> Out(32)
[646] -> Out(111)
[647] -> Out(112)
[648] -> Out(10)
[649] -> Out(19)
[650] -> Halt
[651] -> Out(111)
[652] -> Out(32)
[653] -> Out(109)
[654] -> Out(111)
[655] -> Out(100)
[656] -> Out(32)
[657] -> Out(111)
[658] -> Out(112)
[659] -> Out(10)
[660] -> Out(2)
[661] -> Halt
[662] -> Push(32768)
[663] -> Push(32771)
[664] -> Push(32772)
[665] -> Push(32773)
[666] -> Push(32774)
[667] -> Set(32774,32768)
[668] -> Set(32773,32769)
[669] -> RMem(32772,32768)
[670] -> Set(32769,0)
[671] -> Add(32771,1,32769)
[672] -> Gt(32768,32771,32772)
[673] -> JumpT(32768,65507)
[674] -> Add(32771,32771,32774)
[675] -> RMem(32768,32771)
[676] -> Call(32773)
[677] -> Add(32769,32769,1)
[678] -> JumpT(32769,65480)
[679] -> Pop(32774)
[680] -> Pop(32773)
[681] -> Pop(32772)
[682] -> Pop(32771)
[683] -> Pop(32768)
[684] -> Ret
[685] -> Push(32769)
[686] -> Set(32769,65528)
[687] -> Call(65458)
[688] -> Pop(32769)
[689] -> Ret
[690] -> Out(2)
[691] -> Ret
[692] -> Push(32769)
[693] -> Set(32769,32770)
[694] -> Call(2125)
[695] -> Out(32769)
[696] -> Pop(32769)
[697] -> Ret
[698] -> Push(32769)
[699] -> Push(32771)
[700] -> RMem(32771,32768)
[701] -> JumpF(32771,1563)
[702] -> Call(65458)
[703] -> JumpT(32769,1563)
[704] -> Set(32768,32770)
[705] -> Jump(1566)
[706] -> Set(32768,65535)
[707] -> Pop(32771)
[708] -> Pop(32769)
[709] -> Ret
[710] -> Push(32769)
[711] -> Push(32770)
[712] -> Set(32770,32769)
[713] -> Set(32769,1605)
[714] -> Call(1543)
[715] -> Pop(32770)
[716] -> Pop(32769)
[717] -> Ret
[718] -> Push(32769)
[719] -> Push(32770)
[720] -> Set(32770,32769)
[721] -> Set(32769,1648)
[722] -> Call(1543)
[723] -> Pop(32770)
[724] -> Pop(32769)
[725] -> Ret
[726] -> Eq(32768,32768,32770)
[727] -> JumpF(32768,1618)
[728] -> Set(32770,32769)
[729] -> Set(32769,65535)
[730] -> Ret
[731] -> Push(32771)
[732] -> Add(32771,32770,1)
[733] -> Add(32771,32771,32769)
[734] -> RMem(32771,32771)
[735] -> Eq(32771,32768,32771)
[736] -> JumpT(32771,1645)
[737] -> Set(32770,32769)
[738] -> Set(32769,65535)
[739] -> Pop(32771)
[740] -> Ret
[741] -> Push(32769)
[742] -> Set(32769,32770)
[743] -> Call(65411)
[744] -> Pop(32769)
[745] -> JumpF(32768,65410)
[746] -> Set(32770,32769)
[747] -> Set(32769,65535)
[748] -> Ret
[749] -> Push(32769)
[750] -> Push(32770)
[751] -> Push(32771)
[752] -> Push(32772)
[753] -> RMem(32771,32768)
[754] -> RMem(32772,32769)
[755] -> Eq(32770,32771,32772)
[756] -> JumpF(32770,65455)
[757] -> Or(32770,32771,32772)
[758] -> JumpF(32770,65450)
[759] -> Set(32770,32769)
[760] -> Set(32769,1619)
[761] -> Call(65458)
[762] -> JumpF(32769,65455)
[763] -> Set(32768,1)
[764] -> Jump(65458)
[765] -> Set(32768,0)
[766] -> Pop(32772)
[767] -> Pop(32771)
[768] -> Pop(32770)
[769] -> Pop(32769)
[770] -> Ret
[771] -> Push(32768)
[772] -> Push(32769)
[773] -> Set(32769,65460)
[774] -> RMem(32768,32769)
[775] -> Push(32769)
[776] -> Multiply(32769,32769,32769)
[777] -> Call(2125)
[778] -> Set(32769,16724)
[779] -> Call(2125)
[780] -> Pop(32769)
[781] -> WMem(32769,32768)
[782] -> Add(32769,32769,1)
[783] -> Eq(32768,30050,32769)
[784] -> JumpF(32768,65474)
[785] -> Pop(32769)
[786] -> Pop(32768)
[787] -> Ret
[788] -> Push(32768)
[789] -> Push(32770)
[790] -> Push(32771)
[791] -> Push(32772)
[792] -> Push(32773)
[793] -> Add(32770,32769,32768)
[794] -> Set(32768,32769)
[795] -> Set(32773,0)
[796] -> Add(32768,32768,1)
[797] -> Gt(32771,32768,32770)
[798] -> JumpT(32771,1816)
[799] -> In(32772)
[800] -> Eq(32771,32772,10)
[801] -> JumpT(32771,1816)
[802] -> WMem(32768,32772)
[803] -> Add(32773,32773,1)
[804] -> Jump(65531)
[805] -> WMem(32769,32773)
[806] -> Eq(32771,32772,10)
[807] -> JumpT(32771,1830)
[808] -> In(32772)
[809] -> Jump(1819)
[810] -> Pop(32773)
[811] -> Pop(32772)
[812] -> Pop(32771)
[813] -> Pop(32770)
[814] -> Pop(32768)
[815] -> Ret
[816] -> Push(32771)
[817] -> Push(32772)
[818] -> Push(32773)
[819] -> Push(32774)
[820] -> Set(32774,1)
[821] -> Add(32772,32771,32774)
[822] -> RMem(32772,32772)
[823] -> Add(32773,65517,32774)
[824] -> WMem(32773,32772)
[825] -> Add(32774,32774,1)
[826] -> RMem(32773,65517)
[827] -> Gt(32772,32774,32773)
[828] -> JumpF(32772,1852)
[829] -> Set(32771,0)
[830] -> Set(32772,0)
[831] -> RMem(32773,65517)
[832] -> Modulo(32773,32772,32773)
[833] -> Add(32773,32773,65517)
[834] -> Add(32773,32773,1)
[835] -> RMem(32774,32773)
[836] -> Multiply(32774,32774,65409)
[837] -> Add(32774,32774,12345)
[838] -> WMem(32773,32774)
[839] -> Push(32768)
[840] -> Push(32769)
[841] -> Set(32769,32774)
[842] -> Call(2125)
[843] -> Set(32774,32768)
[844] -> Pop(32769)
[845] -> Pop(32768)
[846] -> RMem(32773,32769)
[847] -> Modulo(32774,32774,32773)
[848] -> Add(32774,32774,1)
[849] -> Gt(32773,32774,32770)
[850] -> JumpT(32773,65440)
[851] -> Set(32771,1)
[852] -> Add(32774,32774,32769)
[853] -> RMem(32774,32774)
[854] -> Add(32772,32772,1)
[855] -> Add(32773,32772,65521)
[856] -> WMem(32773,32774)
[857] -> RMem(32773,65521)
[858] -> Eq(32773,32772,32773)
[859] -> JumpF(32773,1886)
[860] -> JumpF(32771,1880)
[861] -> Push(32768)
[862] -> Set(32768,65521)
[863] -> Call(65518)
[864] -> Pop(32768)
[865] -> Pop(32774)
[866] -> Pop(32773)
[867] -> Pop(32772)
[868] -> Pop(32771)
[869] -> Ret
[870] -> Push(32768)
[871] -> Push(32769)
[872] -> Push(32770)
[873] -> Push(32771)
[874] -> Push(32772)
[875] -> Push(32773)
[876] -> Set(32770,1)
[877] -> Set(32773,0)
[878] -> JumpF(32768,2092)
[879] -> Eq(32772,32770,10000)
[880] -> Set(32771,32768)
[881] -> JumpT(32772,65528)
[882] -> Multiply(32769,32770,10)
[883] -> Modulo(32771,32768,32769)
[884] -> Set(32772,0)
[885] -> Multiply(32770,32770,65535)
[886] -> JumpF(32771,2060)
[887] -> Add(32772,32772,1)
[888] -> Add(32771,32771,32770)
[889] -> Jump(65535)
[890] -> Multiply(32770,32770,65535)
[891] -> Multiply(32771,32772,32770)
[892] -> Multiply(32771,32771,65535)
[893] -> Add(32768,32768,32771)
[894] -> Add(32772,32772,48)
[895] -> Multiply(32770,32770,10)
[896] -> Add(32773,32773,1)
[897] -> Push(32772)
[898] -> Jump(65507)
[899] -> JumpT(32773,2099)
[900] -> Out(2112)
[901] -> Jump(2112)
[902] -> JumpF(32773,2112)
[903] -> Pop(32768)
[904] -> Out(32773)
[905] -> Add(32773,32773,65535)
[906] -> Jump(2099)
[907] -> Pop(32773)
[908] -> Pop(32772)
[909] -> Pop(32771)
[910] -> Pop(32770)
[911] -> Pop(32769)
[912] -> Pop(32768)
[913] -> Ret
[914] -> Push(32769)
[915] -> Push(32770)
[916] -> And(32770,32768,32769)
[917] -> Not(32770,32770)
[918] -> Or(32768,32768,32769)
[919] -> And(32768,32768,32770)
[920] -> Pop(32770)
[921] -> Pop(32769)
[922] -> Ret
[923] -> Add(32768,32768,32769)
[924] -> Gt(32769,32769,32768)
[925] -> Ret
[926] -> Push(32770)
[927] -> Gt(32770,32769,32768)
[928] -> Multiply(32769,32769,65535)
[929] -> Add(32768,32768,32769)
[930] -> Set(32769,32770)
[931] -> Pop(32770)
[932] -> Ret
[933] -> JumpF(32768,65473)
[934] -> JumpF(32769,65473)
[935] -> Push(32770)
[936] -> Push(32771)
[937] -> Gt(32770,32769,32768)
[938] -> JumpT(32770,65436)
[939] -> Set(32770,32768)
[940] -> Set(32768,32769)
[941] -> Set(32769,32770)
[942] -> Set(32770,32768)
[943] -> Set(32768,0)
[944] -> Add(32768,32768,32769)
[945] -> Gt(32771,32769,32768)
[946] -> JumpT(32771,65465)
[947] -> Add(32770,32770,65535)
[948] -> JumpT(32770,65442)
[949] -> Set(32769,0)
[950] -> Jump(65468)
[951] -> Set(32769,1)
[952] -> Pop(32771)
[953] -> Pop(32770)
[954] -> Ret
[955] -> Set(32768,0)
[956] -> Set(32769,0)
[957] -> Ret
[958] -> Push(32769)
[959] -> Push(32770)
[960] -> JumpF(32769,65508)
[961] -> Add(32769,32769,65535)
[962] -> And(32770,32768,16384)
[963] -> Multiply(32768,32768,2)
[964] -> JumpF(32770,65484)
[965] -> Or(32768,32768,1)
[966] -> Jump(65484)
[967] -> Pop(32770)
[968] -> Pop(32769)
[969] -> Ret
[970] -> Push(32769)
[971] -> Gt(32769,32768,14)
[972] -> JumpT(32769,2309)
[973] -> Set(32769,32768)
[974] -> Set(32768,1)
[975] -> JumpF(32769,2312)
[976] -> Add(32769,32769,65535)
[977] -> Multiply(32768,32768,2)
[978] -> Jump(65528)
[979] -> Set(32768,65535)
[980] -> Pop(32769)
[981] -> Ret
[982] -> Jump(65454)
[983] -> Halt
[984] -> Halt
[985] -> Halt
[986] -> Halt
[987] -> Halt
[988] -> Halt
[989] -> Halt
[990] -> Halt
[991] -> Halt
[992] -> Halt
[993] -> Halt
[994] -> Halt
[995] -> Halt
[996] -> Halt
[997] -> Halt
[998] -> Halt
[999] -> Halt
[1000] -> Halt
[1001] -> Halt
[1002] -> Halt
[1003] -> Halt
[1004] -> Halt
[1005] -> Halt
[1006] -> Halt
[1007] -> Halt
[1008] -> Halt
[1009] -> Halt
[1010] -> Halt
[1011] -> Halt
[1012] -> Halt
[1013] -> Halt
[1014] -> Halt
[1015] -> Halt
[1016] -> Halt
[1017] -> Halt
[1018] -> Halt
[1019] -> Halt
[1020] -> Halt
[1021] -> Halt
[1022] -> Halt
[1023] -> Halt
[1024] -> Halt
[1025] -> Halt
[1026] -> Halt
[1027] -> Push(32768)
[1028] -> Push(32769)
[1029] -> Push(32770)
[1030] -> Push(32771)
[1031] -> RMem(32769,65452)
[1032] -> RMem(32768,65453)
[1033] -> Eq(32768,32768,32769)
[1034] -> JumpT(32768,65490)
[1035] -> RMem(32768,65452)
[1036] -> Add(32768,32768,4)
[1037] -> RMem(32768,32768)
[1038] -> JumpF(32768,65490)
[1039] -> Call(32768)
[1040] -> RMem(32769,65452)
[1041] -> RMem(32768,65453)
[1042] -> Eq(32768,32768,32769)
[1043] -> JumpT(32768,65511)
[1044] -> Set(32768,25974)
[1045] -> WMem(32768,0)
[1046] -> Call(65428)
[1047] -> WMem(65453,32769)
[1048] -> Push(32768)
[1049] -> Push(32769)
[1050] -> Push(32770)
[1051] -> Set(32768,27414)
[1052] -> Set(32769,65531)
[1053] -> Add(32770,65434,9311)
[1054] -> Call(65458)
[1055] -> Pop(32770)
[1056] -> Pop(32769)
[1057] -> Pop(32768)
[1058] -> Set(32768,32)
[1059] -> Set(32769,25974)
[1060] -> Call(65511)
[1061] -> Out(10)
[1062] -> Out(32768)
[1063] -> Set(32768,25974)
[1064] -> Set(32769,32)
[1065] -> Call(1571)
[1066] -> Eq(32769,32768,65535)
[1067] -> JumpF(32769,2848)
[1068] -> RMem(32768,25974)
[1069] -> Set(32770,32768)
[1070] -> RMem(32769,25974)
[1071] -> Push(32769)
[1072] -> WMem(25974,32770)
[1073] -> Set(32768,27398)
[1074] -> Set(32769,25974)
[1075] -> Call(1588)
[1076] -> Pop(32769)
[1077] -> WMem(25974,32769)
[1078] -> Eq(32769,32768,65535)
[1079] -> JumpF(32769,2885)
[1080] -> Set(32768,0)
[1081] -> Set(32770,0)
[1082] -> Add(32769,27406,1)
[1083] -> Add(32769,32769,32768)
[1084] -> RMem(32769,32769)
[1085] -> RMem(32771,25974)
[1086] -> Eq(32771,32771,32770)
[1087] -> JumpT(32771,65408)
[1088] -> Multiply(32768,32770,65535)
[1089] -> RMem(32771,25974)
[1090] -> Add(32771,32768,32771)
[1091] -> JumpF(32770,2924)
[1092] -> Add(32771,32771,65535)
[1093] -> Modulo(32771,32771,32)
[1094] -> Add(32768,25974,32770)
[1095] -> JumpF(32770,2939)
[1096] -> Add(32768,32768,1)
[1097] -> WMem(32768,32771)
[1098] -> Jump(65414)
[1099] -> Set(32768,25974)
[1100] -> WMem(32768,0)
[1101] -> Call(32769)
[1102] -> JumpT(32769,65462)
[1103] -> Pop(32771)
[1104] -> Pop(32770)
[1105] -> Pop(32769)
[1106] -> Pop(32768)
[1107] -> Ret
[1108] -> Push(32768)
[1109] -> Push(32769)
[1110] -> Push(32770)
[1111] -> RMem(32769,32768)
[1112] -> JumpF(32769,65496)
[1113] -> Call(5921)
[1114] -> JumpF(32768,65470)
[1115] -> Push(32768)
[1116] -> Call(5990)
[1117] -> Set(32769,32768)
[1118] -> Pop(32768)
[1119] -> JumpF(32769,65470)
[1120] -> Add(32769,32768,1)
[1121] -> RMem(32768,32769)
[1122] -> Call(65518)
[1123] -> Out(65446)
[1124] -> Jump(65446)
[1125] -> Push(32768)
[1126] -> Push(32769)
[1127] -> Push(32770)
[1128] -> Set(32768,27432)
[1129] -> Set(32769,65531)
[1130] -> Add(32770,22833,65477)
[1131] -> Call(65458)
[1132] -> Pop(32770)
[1133] -> Pop(32769)
[1134] -> Pop(32768)
[1135] -> Jump(65446)
[1136] -> RMem(32768,65452)
[1137] -> Push(32768)
[1138] -> Out(61)
[1139] -> Out(32)
[1140] -> Out(32768)
[1141] -> Add(32768,32768,0)
[1142] -> RMem(32768,32768)
[1143] -> Call(65518)
[1144] -> Out(61)
[1145] -> Out(61)
[1146] -> Out(10)
[1147] -> Out(32768)
[1148] -> Pop(32768)
[1149] -> Push(32768)
[1150] -> Add(32768,32768,1)
[1151] -> RMem(32768,32768)
[1152] -> RMem(32769,32768)
[1153] -> Eq(32769,32769,2)
[1154] -> JumpF(32769,3104)
[1155] -> Push(32768)
[1156] -> Set(32768,2680)
[1157] -> Call(5990)
[1158] -> Set(32769,32768)
[1159] -> Pop(32768)
[1160] -> Add(32768,32768,1)
[1161] -> Add(32768,32768,32769)
[1162] -> RMem(32768,32768)
[1163] -> Call(65518)
[1164] -> Out(32768)
[1165] -> Pop(32768)
[1166] -> Push(32768)
[1167] -> Call(65471)
[1168] -> JumpF(32768,3146)
[1169] -> Push(32768)
[1170] -> Push(32769)
[1171] -> Push(32770)
[1172] -> Set(32768,27455)
[1173] -> Set(32769,65531)
[1174] -> Add(32770,65435,65496)
[1175] -> Call(65458)
[1176] -> Pop(32770)
[1177] -> Pop(32769)
[1178] -> Pop(32768)
[1179] -> RMem(32770,65452)
[1180] -> Call(65524)
[1181] -> Pop(32768)
[1182] -> Push(32768)
[1183] -> Add(32768,32768,2)
[1184] -> RMem(32768,32768)
[1185] -> RMem(32768,32768)
[1186] -> Eq(32770,32768,1)
[1187] -> Out(84)
[1188] -> Out(104)
[1189] -> Out(101)
[1190] -> Out(114)
[1191] -> Out(101)
[1192] -> Out(32)
[1193] -> Out(32770)
[1194] -> JumpT(32770,3189)
[1195] -> Out(114)
[1196] -> Out(101)
[1197] -> Out(3193)
[1198] -> Jump(3193)
[1199] -> Out(115)
[1200] -> Out(32)
[1201] -> Out(65489)
[1202] -> Call(65489)
[1203] -> Out(101)
[1204] -> Out(120)
[1205] -> Out(105)
[1206] -> Out(116)
[1207] -> Out(32770)
[1208] -> Eq(32770,32768,1)
[1209] -> JumpT(32770,65424)
[1210] -> Out(58)
[1211] -> Out(10)
[1212] -> Out(32768)
[1213] -> Pop(32768)
[1214] -> Push(32768)
[1215] -> Add(32768,32768,2)
[1216] -> RMem(32768,32768)
[1217] -> Set(32769,65462)
[1218] -> Call(65458)
[1219] -> Pop(32768)
[1220] -> Pop(32770)
[1221] -> Pop(32769)
[1222] -> Pop(32768)
[1223] -> Ret
[1224] -> Push(32768)
[1225] -> Push(32769)
[1226] -> Push(32770)
[1227] -> Set(32769,32768)
[1228] -> RMem(32768,65452)
[1229] -> Add(32768,32768,2)
[1230] -> RMem(32768,32768)
[1231] -> Call(1588)
[1232] -> Eq(32770,32768,65535)
[1233] -> JumpT(32770,65510)
[1234] -> RMem(32770,65452)
[1235] -> Add(32770,32770,3)
[1236] -> RMem(32770,32770)
[1237] -> Add(32770,32770,1)
[1238] -> Add(32770,32770,32768)
[1239] -> RMem(32770,32770)
[1240] -> WMem(65452,32770)
[1241] -> WMem(65453,0)
[1242] -> Jump(65534)
[1243] -> Push(32768)
[1244] -> Push(32769)
[1245] -> Push(32770)
[1246] -> Set(32768,27482)
[1247] -> Set(32769,65531)
[1248] -> Add(32770,65417,65504)
[1249] -> Call(65458)
[1250] -> Pop(32770)
[1251] -> Pop(32769)
[1252] -> Pop(32768)
[1253] -> Pop(32770)
[1254] -> Pop(32769)
[1255] -> Pop(32768)
[1256] -> Ret
[1257] -> Push(32768)
[1258] -> Push(32768)
[1259] -> Push(32769)
[1260] -> Push(32770)
[1261] -> Set(32768,65420)
[1262] -> Set(32769,65531)
[1263] -> Add(32770,65505,21525)
[1264] -> Call(65458)
[1265] -> Pop(32770)
[1266] -> Pop(32769)
[1267] -> Pop(32768)
[1268] -> Pop(32768)
[1269] -> Ret
[1270] -> Push(32768)
[1271] -> Push(32770)
[1272] -> Push(32768)
[1273] -> Push(32769)
[1274] -> Push(32770)
[1275] -> Set(32768,65413)
[1276] -> Set(32769,65531)
[1277] -> Add(32770,8460,65500)
[1278] -> Call(65458)
[1279] -> Pop(32770)
[1280] -> Pop(32769)
[1281] -> Pop(32768)
[1282] -> Set(32770,0)
[1283] -> Call(65524)
[1284] -> Pop(32770)
[1285] -> Pop(32768)
[1286] -> Ret
[1287] -> Push(32768)
[1288] -> Push(32769)
[1289] -> Push(32770)
[1290] -> Call(5921)
[1291] -> JumpF(32768,65409)
[1292] -> Add(32769,32768,2)
[1293] -> RMem(32768,32769)
[1294] -> RMem(32770,65452)
[1295] -> Eq(32770,32768,32770)
[1296] -> JumpF(32770,65409)
[1297] -> WMem(32769,0)
[1298] -> Push(32768)
[1299] -> Push(32769)
[1300] -> Push(32770)
[1301] -> Set(32768,65430)
[1302] -> Set(32769,65531)
[1303] -> Add(32770,65495,65429)
[1304] -> Call(65458)
[1305] -> Pop(32770)
[1306] -> Pop(32769)
[1307] -> Pop(32768)
[1308] -> Jump(65433)
[1309] -> Push(32768)
[1310] -> Push(32769)
[1311] -> Push(32770)
[1312] -> Set(32768,65438)
[1313] -> Set(32769,65531)
[1314] -> Add(32770,65413,2165)
[1315] -> Call(65458)
[1316] -> Pop(32770)
[1317] -> Pop(32769)
[1318] -> Pop(32768)
[1319] -> Pop(32770)
[1320] -> Pop(32769)
[1321] -> Pop(32768)
[1322] -> Ret
[1323] -> Push(32768)
[1324] -> Push(32769)
[1325] -> Call(5921)
[1326] -> JumpF(32768,65491)
[1327] -> Add(32769,32768,2)
[1328] -> RMem(32768,32769)
[1329] -> JumpT(32768,65491)
[1330] -> RMem(32768,65452)
[1331] -> WMem(32769,32768)
[1332] -> Push(32768)
[1333] -> Push(32769)
[1334] -> Push(32770)
[1335] -> Set(32768,65466)
[1336] -> Set(32769,65531)
[1337] -> Add(32770,65532,4211)
[1338] -> Call(65458)
[1339] -> Pop(32770)
[1340] -> Pop(32769)
[1341] -> Pop(32768)
[1342] -> Jump(65515)
[1343] -> Push(32768)
[1344] -> Push(32769)
[1345] -> Push(32770)
[1346] -> Set(32768,65476)
[1347] -> Set(32769,65531)
[1348] -> Add(32770,65484,8479)
[1349] -> Call(65458)
[1350] -> Pop(32770)
[1351] -> Pop(32769)
[1352] -> Pop(32768)
[1353] -> Pop(32769)
[1354] -> Pop(32768)
[1355] -> Ret
[1356] -> Push(32768)
[1357] -> Push(32769)
[1358] -> Call(5921)
[1359] -> JumpF(32768,3601)
[1360] -> Add(32769,32768,2)
[1361] -> RMem(32769,32769)
[1362] -> JumpT(32769,3601)
[1363] -> Add(32769,32768,3)
[1364] -> RMem(32769,32769)
[1365] -> JumpF(32769,3627)
[1366] -> Call(32769)
[1367] -> Jump(3651)
[1368] -> Push(32768)
[1369] -> Push(32769)
[1370] -> Push(32770)
[1371] -> Set(32768,65511)
[1372] -> Set(32769,65531)
[1373] -> Add(32770,65415,7787)
[1374] -> Call(65458)
[1375] -> Pop(32770)
[1376] -> Pop(32769)
[1377] -> Pop(32768)
[1378] -> Jump(3651)
[1379] -> Push(32768)
[1380] -> Push(32769)
[1381] -> Push(32770)
[1382] -> Set(32768,28170)
[1383] -> Set(32769,65531)
[1384] -> Add(32770,65459,65465)
[1385] -> Call(65458)
[1386] -> Pop(32770)
[1387] -> Pop(32769)
[1388] -> Pop(32768)
[1389] -> Pop(32769)
[1390] -> Pop(32768)
[1391] -> Ret
[1392] -> Push(32768)
[1393] -> Push(32769)
[1394] -> Push(32770)
[1395] -> Set(32768,2680)
[1396] -> Call(5990)
[1397] -> JumpT(32768,3694)
[1398] -> Add(32768,2676,2)
[1399] -> WMem(32768,65535)
[1400] -> Add(32768,2680,2)
[1401] -> WMem(32768,65535)
[1402] -> Add(32768,2672,2)
[1403] -> WMem(32768,65535)
[1404] -> WMem(65452,2648)
[1405] -> Pop(32770)
[1406] -> Pop(32769)
[1407] -> Pop(32768)
[1408] -> Ret
[1409] -> Push(32768)
[1410] -> Push(32769)
[1411] -> Push(32770)
[1412] -> Set(32768,28204)
[1413] -> Set(32769,65531)
[1414] -> Add(32770,26217,65425)
[1415] -> Call(65458)
[1416] -> Pop(32770)
[1417] -> Pop(32769)
[1418] -> Pop(32768)
[1419] -> Halt
[1420] -> Halt
[1421] -> Push(32769)
[1422] -> RMem(32769,65422)
[1423] -> Or(32769,32769,32768)
[1424] -> WMem(65422,32769)
[1425] -> Pop(32769)
[1426] -> Ret
[1427] -> WMem(65422,0)
[1428] -> Ret
[1429] -> Push(32768)
[1430] -> Set(32768,1)
[1431] -> Call(65423)
[1432] -> Pop(32768)
[1433] -> Ret
[1434] -> Push(32768)
[1435] -> Set(32768,2)
[1436] -> Call(65423)
[1437] -> Pop(32768)
[1438] -> Ret
[1439] -> Push(32768)
[1440] -> Set(32768,4)
[1441] -> Call(65423)
[1442] -> Pop(32768)
[1443] -> Ret
[1444] -> Push(32768)
[1445] -> Set(32768,8)
[1446] -> Call(65423)
[1447] -> Pop(32768)
[1448] -> Ret
[1449] -> Push(32768)
[1450] -> Set(32768,16)
[1451] -> Call(65423)
[1452] -> Pop(32768)
[1453] -> Ret
[1454] -> Push(32768)
[1455] -> Set(32768,32)
[1456] -> Call(65423)
[1457] -> Pop(32768)
[1458] -> Ret
[1459] -> Push(32768)
[1460] -> Push(32769)
[1461] -> Push(32770)
[1462] -> Push(32771)
[1463] -> Set(32768,64)
[1464] -> Call(65423)
[1465] -> Push(32768)
[1466] -> Push(32769)
[1467] -> Push(32770)
[1468] -> Set(32768,28236)
[1469] -> Set(32769,65531)
[1470] -> Add(32770,10264,65511)
[1471] -> Call(65458)
[1472] -> Pop(32770)
[1473] -> Pop(32769)
[1474] -> Pop(32768)
[1475] -> RMem(32768,65422)
[1476] -> Set(32769,25866)
[1477] -> Set(32770,65535)
[1478] -> Set(32771,65419)
[1479] -> Call(1841)
[1480] -> Push(32768)
[1481] -> Push(32769)
[1482] -> Push(32770)
[1483] -> Set(32768,65423)
[1484] -> Set(32769,65531)
[1485] -> Add(32770,65476,26165)
[1486] -> Call(65458)
[1487] -> Pop(32770)
[1488] -> Pop(32769)
[1489] -> Pop(32768)
[1490] -> WMem(65452,2417)
[1491] -> Pop(32771)
[1492] -> Pop(32770)
[1493] -> Pop(32769)
[1494] -> Pop(32768)
[1495] -> Ret
[1496] -> Push(32768)
[1497] -> Push(32769)
[1498] -> RMem(32768,65438)
[1499] -> RMem(32769,65501)
[1500] -> Eq(32768,32768,32769)
[1501] -> JumpT(32768,3940)
[1502] -> Push(32768)
[1503] -> Push(32769)
[1504] -> Push(32770)
[1505] -> Set(32768,65467)
[1506] -> Set(32769,65531)
[1507] -> Add(32770,65502,65439)
[1508] -> Call(65458)
[1509] -> Pop(32770)
[1510] -> Pop(32769)
[1511] -> Pop(32768)
[1512] -> WMem(65452,65433)
[1513] -> WMem(65453,65433)
[1514] -> Pop(32769)
[1515] -> Pop(32768)
[1516] -> Ret
[1517] -> Halt
[1518] -> Halt
[1519] -> Halt
[1520] -> Halt
[1521] -> Halt
[1522] -> Halt
[1523] -> Push(32768)
[1524] -> Push(32769)
[1525] -> Set(32768,2)
[1526] -> Set(32769,0)
[1527] -> Call(4218)
[1528] -> Pop(32769)
[1529] -> Pop(32768)
[1530] -> Ret
[1531] -> Push(32768)
[1532] -> Push(32769)
[1533] -> Set(32768,8)
[1534] -> Set(32769,1)
[1535] -> Call(65463)
[1536] -> Pop(32769)
[1537] -> Pop(32768)
[1538] -> Ret
[1539] -> Push(32768)
[1540] -> Push(32769)
[1541] -> Set(32768,1)
[1542] -> Set(32769,2)
[1543] -> Call(4218)
[1544] -> Pop(32769)
[1545] -> Pop(32768)
[1546] -> Ret
[1547] -> Push(32768)
[1548] -> Push(32769)
[1549] -> Set(32768,1)
[1550] -> Set(32769,3)
[1551] -> Call(65463)
[1552] -> Call(65461)
[1553] -> Pop(32769)
[1554] -> Pop(32768)
[1555] -> Ret
[1556] -> Push(32768)
[1557] -> Push(32769)
[1558] -> Set(32768,4)
[1559] -> Set(32769,4)
[1560] -> Call(65463)
[1561] -> Pop(32769)
[1562] -> Pop(32768)
[1563] -> Ret
[1564] -> Push(32768)
[1565] -> Push(32769)
[1566] -> Set(32768,2)
[1567] -> Set(32769,5)
[1568] -> Call(4218)
[1569] -> Pop(32769)
[1570] -> Pop(32768)
[1571] -> Ret
[1572] -> Push(32768)
[1573] -> Push(32769)
[1574] -> Set(32768,11)
[1575] -> Set(32769,6)
[1576] -> Call(65463)
[1577] -> Pop(32769)
[1578] -> Pop(32768)
[1579] -> Ret
[1580] -> Push(32768)
[1581] -> Push(32769)
[1582] -> Set(32768,2)
[1583] -> Set(32769,7)
[1584] -> Call(4218)
[1585] -> Pop(32769)
[1586] -> Pop(32768)
[1587] -> Ret
[1588] -> Push(32768)
[1589] -> Push(32769)
[1590] -> Set(32768,0)
[1591] -> Set(32769,8)
[1592] -> Call(4218)
[1593] -> Pop(32769)
[1594] -> Pop(32768)
[1595] -> Ret
[1596] -> Push(32768)
[1597] -> Push(32769)
[1598] -> Set(32768,4)
[1599] -> Set(32769,9)
[1600] -> Call(65463)
[1601] -> Pop(32769)
[1602] -> Pop(32768)
[1603] -> Ret
[1604] -> Push(32768)
[1605] -> Push(32769)
[1606] -> Set(32768,1)
[1607] -> Set(32769,10)
[1608] -> Call(4218)
[1609] -> Pop(32769)
[1610] -> Pop(32768)
[1611] -> Ret
[1612] -> Push(32768)
[1613] -> Push(32769)
[1614] -> Set(32768,18)
[1615] -> Set(32769,11)
[1616] -> Call(65463)
[1617] -> Pop(32769)
[1618] -> Pop(32768)
[1619] -> Ret
[1620] -> Call(4611)
[1621] -> Ret
[1622] -> Push(32768)
[1623] -> Push(32769)
[1624] -> Set(32768,1)
[1625] -> Set(32769,12)
[1626] -> Call(4218)
[1627] -> Pop(32769)
[1628] -> Pop(32768)
[1629] -> Ret
[1630] -> Push(32768)
[1631] -> Push(32769)
[1632] -> Set(32768,9)
[1633] -> Set(32769,13)
[1634] -> Call(65463)
[1635] -> Pop(32769)
[1636] -> Pop(32768)
[1637] -> Ret
[1638] -> Push(32768)
[1639] -> Push(32769)
[1640] -> Set(32768,2)
[1641] -> Set(32769,14)
[1642] -> Call(4218)
[1643] -> Pop(32769)
[1644] -> Pop(32768)
[1645] -> Ret
[1646] -> Push(32768)
[1647] -> Push(32769)
[1648] -> Push(32770)
[1649] -> Add(32770,65436,2)
[1650] -> RMem(32770,32770)
[1651] -> JumpT(32770,65456)
[1652] -> Call(4405)
[1653] -> WMem(3951,32768)
[1654] -> Add(32769,32768,3945)
[1655] -> RMem(32769,32769)
[1656] -> Set(32768,65448)
[1657] -> Call(65518)
[1658] -> Set(32768,32769)
[1659] -> Call(65518)
[1660] -> Set(32768,65512)
[1661] -> Call(65518)
[1662] -> Set(32768,32769)
[1663] -> Call(65518)
[1664] -> Out(10)
[1665] -> Out(10)
[1666] -> Out(32770)
[1667] -> Pop(32770)
[1668] -> Pop(32769)
[1669] -> Pop(32768)
[1670] -> Ret
[1671] -> Push(32768)
[1672] -> Push(32769)
[1673] -> Push(32770)
[1674] -> Add(32770,65436,2)
[1675] -> RMem(32770,32770)
[1676] -> JumpT(32770,4398)
[1677] -> Call(4405)
[1678] -> Push(32768)
[1679] -> RMem(32768,3951)
[1680] -> Add(32769,32768,3945)
[1681] -> RMem(32769,32769)
[1682] -> Set(32768,26122)
[1683] -> Call(65518)
[1684] -> Set(32768,32769)
[1685] -> Call(65518)
[1686] -> Set(32768,26170)
[1687] -> Call(65518)
[1688] -> Pop(32768)
[1689] -> Set(32769,32768)
[1690] -> RMem(32768,3952)
[1691] -> RMem(32770,3951)
[1692] -> Add(32770,32770,3948)
[1693] -> RMem(32770,32770)
[1694] -> Call(32770)
[1695] -> JumpT(32769,4391)
[1696] -> RMem(32769,3952)
[1697] -> WMem(3952,32768)
[1698] -> Gt(32770,32768,32769)
[1699] -> JumpF(32770,4369)
[1700] -> Push(32768)
[1701] -> Set(32768,26235)
[1702] -> Call(65518)
[1703] -> Pop(32768)
[1704] -> Gt(32770,32769,32768)
[1705] -> JumpF(32770,4385)
[1706] -> Push(32768)
[1707] -> Set(32768,65435)
[1708] -> Call(65518)
[1709] -> Pop(32768)
[1710] -> Out(10)
[1711] -> Out(4398)
[1712] -> Jump(4398)
[1713] -> Call(4660)
[1714] -> Set(32768,65467)
[1715] -> Call(65518)
[1716] -> Pop(32770)
[1717] -> Pop(32769)
[1718] -> Pop(32768)
[1719] -> Ret
[1720] -> Push(32768)
[1721] -> Push(32769)
[1722] -> Push(32770)
[1723] -> Push(32771)
[1724] -> Push(32772)
[1725] -> Push(32773)
[1726] -> RMem(32773,3953)
[1727] -> Gt(32771,32773,29999)
[1728] -> JumpT(32771,4434)
[1729] -> Add(32773,32773,1)
[1730] -> WMem(3953,32773)
[1731] -> Set(32771,32768)
[1732] -> Set(32772,32769)
[1733] -> Add(32768,32773,2)
[1734] -> Call(65513)
[1735] -> RMem(32769,3954)
[1736] -> Or(32768,32769,32768)
[1737] -> Set(32769,32772)
[1738] -> Call(65480)
[1739] -> WMem(3954,32768)
[1740] -> Set(32768,3955)
[1741] -> Add(32769,32773,2)
[1742] -> Set(32770,32772)
[1743] -> Call(65443)
[1744] -> Set(32768,3956)
[1745] -> Multiply(32769,32773,32773)
[1746] -> Multiply(32770,32772,32772)
[1747] -> Call(65443)
[1748] -> Set(32768,3957)
[1749] -> Set(32769,13)
[1750] -> Multiply(32770,32771,9)
[1751] -> Multiply(32770,32770,32770)
[1752] -> Call(65443)
[1753] -> Pop(32773)
[1754] -> Pop(32772)
[1755] -> Pop(32771)
[1756] -> Pop(32770)
[1757] -> Pop(32769)
[1758] -> Pop(32768)
[1759] -> Ret
[1760] -> Push(32768)
[1761] -> RMem(32768,32768)
[1762] -> Call(65480)
[1763] -> Set(32769,32770)
[1764] -> Call(2125)
[1765] -> Pop(32769)
[1766] -> WMem(32769,32768)
[1767] -> Ret
[1768] -> Push(32768)
[1769] -> Add(32768,65436,2)
[1770] -> RMem(32768,32768)
[1771] -> JumpT(32768,4608)
[1772] -> Set(32768,65489)
[1773] -> Call(65518)
[1774] -> RMem(32768,3952)
[1775] -> Eq(32768,32768,30)
[1776] -> JumpT(32768,65502)
[1777] -> Set(32768,65522)
[1778] -> Call(65518)
[1779] -> Set(32768,26398)
[1780] -> Call(65518)
[1781] -> Call(4660)
[1782] -> Jump(4608)
[1783] -> Set(32768,26440)
[1784] -> Call(65518)
[1785] -> RMem(32768,3954)
[1786] -> Add(32768,32768,1)
[1787] -> JumpT(32768,65524)
[1788] -> Set(32768,26484)
[1789] -> Call(65518)
[1790] -> Jump(65493)
[1791] -> Set(32768,65496)
[1792] -> Call(65518)
[1793] -> Add(32768,65436,2)
[1794] -> WMem(32768,65535)
[1795] -> Pop(32768)
[1796] -> Ret
[1797] -> Push(32768)
[1798] -> Add(32768,65436,2)
[1799] -> RMem(32768,32768)
[1800] -> JumpT(32768,4657)
[1801] -> Set(32768,26717)
[1802] -> Call(65518)
[1803] -> RMem(32768,65452)
[1804] -> Eq(32768,32768,2623)
[1805] -> JumpT(32768,4645)
[1806] -> Set(32768,26725)
[1807] -> Call(65518)
[1808] -> Jump(4650)
[1809] -> Set(32768,26731)
[1810] -> Call(65518)
[1811] -> Set(32768,26737)
[1812] -> Call(65518)
[1813] -> Call(4660)
[1814] -> Pop(32768)
[1815] -> Ret
[1816] -> Push(32768)
[1817] -> WMem(3952,22)
[1818] -> WMem(3953,0)
[1819] -> WMem(3954,0)
[1820] -> WMem(3955,0)
[1821] -> WMem(3956,0)
[1822] -> WMem(3957,0)
[1823] -> Add(32768,65436,2)
[1824] -> WMem(32768,2623)
[1825] -> Pop(32768)
[1826] -> Ret
[1827] -> Push(32768)
[1828] -> Add(32768,65436,2)
[1829] -> RMem(32768,32768)
[1830] -> Eq(32768,32768,65535)
[1831] -> JumpT(32768,4717)
[1832] -> Set(32768,65480)
[1833] -> Call(65518)
[1834] -> WMem(65452,2578)
[1835] -> WMem(65453,2578)
[1836] -> Pop(32768)
[1837] -> Ret
[1838] -> Push(32768)
[1839] -> Push(32769)
[1840] -> Push(32770)
[1841] -> Push(32771)
[1842] -> Push(32768)
[1843] -> Push(32769)
[1844] -> Push(32770)
[1845] -> Set(32768,65489)
[1846] -> Set(32769,65531)
[1847] -> Add(32770,11601,65442)
[1848] -> Call(65458)
[1849] -> Pop(32770)
[1850] -> Pop(32769)
[1851] -> Pop(32768)
[1852] -> Set(32768,65426)
[1853] -> Set(32769,25866)
[1854] -> Set(32770,65535)
[1855] -> Set(32771,65517)
[1856] -> Call(1841)
[1857] -> Push(32768)
[1858] -> Push(32769)
[1859] -> Push(32770)
[1860] -> Set(32768,65521)
[1861] -> Set(32769,65531)
[1862] -> Add(32770,7511,278)
[1863] -> Call(65458)
[1864] -> Pop(32770)
[1865] -> Pop(32769)
[1866] -> Pop(32768)
[1867] -> Pop(32771)
[1868] -> Pop(32770)
[1869] -> Pop(32769)
[1870] -> Pop(32768)
[1871] -> Ret
[1872] -> Push(32768)
[1873] -> Add(32768,2672,2)
[1874] -> RMem(32768,32768)
[1875] -> JumpT(32768,65530)
[1876] -> Add(32768,2684,2)
[1877] -> WMem(32768,65535)
[1878] -> Add(32768,2672,2)
[1879] -> WMem(32768,65535)
[1880] -> Add(32768,2676,2)
[1881] -> WMem(32768,0)
[1882] -> Push(32768)
[1883] -> Push(32769)
[1884] -> Push(32770)
[1885] -> Set(32768,28453)
[1886] -> Set(32769,65531)
[1887] -> Add(32770,65430,12901)
[1888] -> Call(65458)
[1889] -> Pop(32770)
[1890] -> Pop(32769)
[1891] -> Pop(32768)
[1892] -> Jump(4882)
[1893] -> Push(32768)
[1894] -> Push(32769)
[1895] -> Push(32770)
[1896] -> Set(32768,28510)
[1897] -> Set(32769,65531)
[1898] -> Add(32770,1322,340)
[1899] -> Call(65458)
[1900] -> Pop(32770)
[1901] -> Pop(32769)
[1902] -> Pop(32768)
[1903] -> Pop(32768)
[1904] -> Ret
[1905] -> Push(32768)
[1906] -> Add(32768,2676,2)
[1907] -> WMem(32768,65535)
[1908] -> Add(32768,2680,2)
[1909] -> WMem(32768,0)
[1910] -> Push(32768)
[1911] -> Push(32769)
[1912] -> Push(32770)
[1913] -> Set(32768,65433)
[1914] -> Set(32769,65531)
[1915] -> Add(32770,65483,2592)
[1916] -> Call(65458)
[1917] -> Pop(32770)
[1918] -> Pop(32769)
[1919] -> Pop(32768)
[1920] -> WMem(65453,0)
[1921] -> Pop(32768)
[1922] -> Ret
[1923] -> Push(32768)
[1924] -> Add(32768,2676,2)
[1925] -> WMem(32768,0)
[1926] -> Add(32768,2680,2)
[1927] -> WMem(32768,65535)
[1928] -> Push(32768)
[1929] -> Push(32769)
[1930] -> Push(32770)
[1931] -> Set(32768,65459)
[1932] -> Set(32769,65531)
[1933] -> Add(32770,65411,65511)
[1934] -> Call(65458)
[1935] -> Pop(32770)
[1936] -> Pop(32769)
[1937] -> Pop(32768)
[1938] -> WMem(65453,0)
[1939] -> Pop(32768)
[1940] -> Ret
[1941] -> Push(32770)
[1942] -> Push(32771)
[1943] -> RMem(32770,65452)
[1944] -> Eq(32770,32770,65433)
[1945] -> JumpT(32770,65433)
[1946] -> Push(32768)
[1947] -> Push(32769)
[1948] -> Push(32770)
[1949] -> Set(32768,65485)
[1950] -> Set(32769,65531)
[1951] -> Add(32770,25,18773)
[1952] -> Call(65458)
[1953] -> Pop(32770)
[1954] -> Pop(32769)
[1955] -> Pop(32768)
[1956] -> Jump(65496)
[1957] -> Add(32770,32768,2)
[1958] -> WMem(32770,65535)
[1959] -> RMem(32770,65438)
[1960] -> Add(32770,32770,65495)
[1961] -> Add(32770,32770,1)
[1962] -> RMem(32770,32770)
[1963] -> Add(32771,65433,1)
[1964] -> RMem(32771,32771)
[1965] -> Add(32771,32771,32770)
[1966] -> Add(32770,32769,48)
[1967] -> WMem(32771,32770)
[1968] -> RMem(32770,65438)
[1969] -> Add(32770,32770,65501)
[1970] -> Add(32770,32770,1)
[1971] -> WMem(32770,32769)
[1972] -> Push(32768)
[1973] -> Push(32768)
[1974] -> Push(32769)
[1975] -> Push(32770)
[1976] -> Set(32768,65528)
[1977] -> Set(32769,65531)
[1978] -> Add(32770,65446,65470)
[1979] -> Call(65458)
[1980] -> Pop(32770)
[1981] -> Pop(32769)
[1982] -> Pop(32768)
[1983] -> Pop(32768)
[1984] -> Push(32768)
[1985] -> Add(32770,32768,0)
[1986] -> RMem(32768,32770)
[1987] -> Call(65518)
[1988] -> Pop(32768)
[1989] -> Push(32768)
[1990] -> Push(32768)
[1991] -> Push(32769)
[1992] -> Push(32770)
[1993] -> Set(32768,28679)
[1994] -> Set(32769,65531)
[1995] -> Add(32770,6177,65494)
[1996] -> Call(65458)
[1997] -> Pop(32770)
[1998] -> Pop(32769)
[1999] -> Pop(32768)
[2000] -> Pop(32768)
[2001] -> RMem(32770,65438)
[2002] -> Add(32770,32770,1)
[2003] -> WMem(65438,32770)
[2004] -> RMem(32771,65501)
[2005] -> Eq(32771,32770,32771)
[2006] -> JumpF(32771,65496)
[2007] -> Set(32768,0)
[2008] -> Add(32769,65501,1)
[2009] -> RMem(32769,32769)
[2010] -> Add(32768,32768,32769)
[2011] -> Add(32769,65501,2)
[2012] -> RMem(32769,32769)
[2013] -> Add(32770,65501,3)
[2014] -> RMem(32770,32770)
[2015] -> Multiply(32770,32770,32770)
[2016] -> Multiply(32769,32769,32770)
[2017] -> Add(32768,32768,32769)
[2018] -> Add(32769,65501,4)
[2019] -> RMem(32769,32769)
[2020] -> Multiply(32770,32769,32769)
[2021] -> Multiply(32770,32770,32769)
[2022] -> Add(32768,32768,32770)
[2023] -> Add(32769,65501,5)
[2024] -> RMem(32769,32769)
[2025] -> Multiply(32769,32769,65535)
[2026] -> Add(32768,32768,32769)
[2027] -> Eq(32769,32768,65423)
[2028] -> JumpT(32769,65472)
[2029] -> Add(32770,65408,2)
[2030] -> WMem(32770,65433)
[2031] -> Add(32770,65412,2)
[2032] -> WMem(32770,65433)
[2033] -> Add(32770,65416,2)
[2034] -> WMem(32770,65433)
[2035] -> Add(32770,65420,2)
[2036] -> WMem(32770,65433)
[2037] -> Add(32770,65424,2)
[2038] -> WMem(32770,65433)
[2039] -> WMem(65438,0)
[2040] -> Set(32768,65495)
[2041] -> Set(32769,65501)
[2042] -> Call(65458)
[2043] -> Push(32768)
[2044] -> Push(32769)
[2045] -> Push(32770)
[2046] -> Set(32768,28710)
[2047] -> Set(32769,65531)
[2048] -> Add(32770,4708,12570)
[2049] -> Call(65458)
[2050] -> Pop(32770)
[2051] -> Pop(32769)
[2052] -> Pop(32768)
[2053] -> Jump(65496)
[2054] -> Push(32768)
[2055] -> Push(32769)
[2056] -> Push(32770)
[2057] -> Set(32768,28777)
[2058] -> Set(32769,65531)
[2059] -> Add(32770,794,11350)
[2060] -> Call(65458)
[2061] -> Pop(32770)
[2062] -> Pop(32769)
[2063] -> Pop(32768)
[2064] -> Pop(32771)
[2065] -> Pop(32770)
[2066] -> Ret
[2067] -> Push(32770)
[2068] -> Add(32770,65433,1)
[2069] -> RMem(32770,32770)
[2070] -> Add(32770,32770,32768)
[2071] -> WMem(32770,95)
[2072] -> Pop(32770)
[2073] -> Ret
[2074] -> Push(32768)
[2075] -> Push(32769)
[2076] -> Set(32768,65408)
[2077] -> Set(32769,2)
[2078] -> Call(4977)
[2079] -> Pop(32769)
[2080] -> Pop(32768)
[2081] -> Ret
[2082] -> Push(32768)
[2083] -> Push(32769)
[2084] -> Set(32768,65412)
[2085] -> Set(32769,3)
[2086] -> Call(4977)
[2087] -> Pop(32769)
[2088] -> Pop(32768)
[2089] -> Ret
[2090] -> Push(32768)
[2091] -> Push(32769)
[2092] -> Set(32768,65416)
[2093] -> Set(32769,5)
[2094] -> Call(4977)
[2095] -> Pop(32769)
[2096] -> Pop(32768)
[2097] -> Ret
[2098] -> Push(32768)
[2099] -> Push(32769)
[2100] -> Set(32768,65420)
[2101] -> Set(32769,7)
[2102] -> Call(4977)
[2103] -> Pop(32769)
[2104] -> Pop(32768)
[2105] -> Ret
[2106] -> Push(32768)
[2107] -> Push(32769)
[2108] -> Set(32768,65424)
[2109] -> Set(32769,9)
[2110] -> Call(4977)
[2111] -> Pop(32769)
[2112] -> Pop(32768)
[2113] -> Ret
[2114] -> Push(32768)
[2115] -> Push(32769)
[2116] -> Push(32770)
[2117] -> JumpF(32775,65509)
[2118] -> Push(32768)
[2119] -> Push(32769)
[2120] -> Push(32770)
[2121] -> Set(32768,65452)
[2122] -> Set(32769,65531)
[2123] -> Add(32770,8317,65515)
[2124] -> Call(65458)
[2125] -> Pop(32770)
[2126] -> Pop(32769)
[2127] -> Pop(32768)
[2128] -> Noop
[2129] -> Noop
[2130] -> Noop
[2131] -> Noop
[2132] -> Noop
[2133] -> Set(32768,4)
[2134] -> Set(32769,1)
[2135] -> Call(65419)
[2136] -> Eq(32769,32768,6)
[2137] -> JumpF(32769,65483)
[2138] -> Push(32768)
[2139] -> Push(32769)
[2140] -> Push(32770)
[2141] -> Set(32768,29014)
[2142] -> Set(32769,65531)
[2143] -> Add(32770,10064,8985)
[2144] -> Call(65458)
[2145] -> Pop(32770)
[2146] -> Pop(32769)
[2147] -> Pop(32768)
[2148] -> Set(32768,32775)
[2149] -> Set(32769,25866)
[2150] -> Set(32770,65535)
[2151] -> Push(32771)
[2152] -> Set(32771,29241)
[2153] -> Call(1841)
[2154] -> Pop(32771)
[2155] -> Push(32768)
[2156] -> Push(32769)
[2157] -> Push(32770)
[2158] -> Set(32768,29245)
[2159] -> Set(32769,65531)
[2160] -> Add(32770,65531,895)
[2161] -> Call(65458)
[2162] -> Pop(32770)
[2163] -> Pop(32769)
[2164] -> Pop(32768)
[2165] -> WMem(65452,65474)
[2166] -> WMem(65453,0)
[2167] -> Add(32769,65428,2)
[2168] -> WMem(32769,65535)
[2169] -> Jump(5714)
[2170] -> Push(32768)
[2171] -> Push(32769)
[2172] -> Push(32770)
[2173] -> Set(32768,65496)
[2174] -> Set(32769,65531)
[2175] -> Add(32770,65517,65415)
[2176] -> Call(65458)
[2177] -> Pop(32770)
[2178] -> Pop(32769)
[2179] -> Pop(32768)
[2180] -> Jump(5714)
[2181] -> Push(32768)
[2182] -> Push(32769)
[2183] -> Push(32770)
[2184] -> Set(32768,29545)
[2185] -> Set(32769,65531)
[2186] -> Add(32770,5209,65445)
[2187] -> Call(65458)
[2188] -> Pop(32770)
[2189] -> Pop(32769)
[2190] -> Pop(32768)
[2191] -> Set(32768,0)
[2192] -> Add(32770,1,65501)
[2193] -> RMem(32769,32770)
[2194] -> Add(32768,32768,32769)
[2195] -> Multiply(32768,32768,65452)
[2196] -> Call(2125)
[2197] -> RMem(32769,65501)
[2198] -> Add(32769,32769,65501)
[2199] -> Add(32770,32770,1)
[2200] -> Gt(32769,32770,32769)
[2201] -> JumpF(32769,5636)
[2202] -> Set(32769,25866)
[2203] -> Set(32770,65535)
[2204] -> Push(32771)
[2205] -> Set(32771,65503)
[2206] -> Call(1841)
[2207] -> Pop(32771)
[2208] -> Push(32768)
[2209] -> Push(32769)
[2210] -> Push(32770)
[2211] -> Set(32768,65507)
[2212] -> Set(32769,65531)
[2213] -> Add(32770,3441,1403)
[2214] -> Call(65458)
[2215] -> Pop(32770)
[2216] -> Pop(32769)
[2217] -> Pop(32768)
[2218] -> WMem(65452,65464)
[2219] -> WMem(65453,0)
[2220] -> Jump(5714)
[2221] -> Pop(32770)
[2222] -> Pop(32769)
[2223] -> Pop(32768)
[2224] -> Ret
[2225] -> Push(32768)
[2226] -> Push(32769)
[2227] -> Push(32770)
[2228] -> Push(32771)
[2229] -> Push(32768)
[2230] -> Push(32769)
[2231] -> Push(32770)
[2232] -> Set(32768,29757)
[2233] -> Set(32769,65531)
[2234] -> Add(32770,3670,65430)
[2235] -> Call(65458)
[2236] -> Pop(32770)
[2237] -> Pop(32769)
[2238] -> Pop(32768)
[2239] -> RMem(32768,3955)
[2240] -> RMem(32769,3956)
[2241] -> Call(2125)
[2242] -> RMem(32769,3957)
[2243] -> Call(2125)
[2244] -> Set(32769,25919)
[2245] -> Set(32770,4)
[2246] -> Push(32771)
[2247] -> Set(32771,65526)
[2248] -> Call(1841)
[2249] -> Pop(32771)
[2250] -> Push(32768)
[2251] -> Push(32769)
[2252] -> Push(32770)
[2253] -> Set(32768,65530)
[2254] -> Set(32769,65531)
[2255] -> Add(32770,65426,1108)
[2256] -> Call(65458)
[2257] -> Pop(32770)
[2258] -> Pop(32769)
[2259] -> Pop(32768)
[2260] -> Pop(32771)
[2261] -> Pop(32770)
[2262] -> Pop(32769)
[2263] -> Pop(32768)
[2264] -> Ret
[2265] -> Out(32)
[2266] -> Out(65518)
[2267] -> Call(65518)
[2268] -> Out(2)
[2269] -> Ret
[2270] -> Push(32769)
[2271] -> Push(32770)
[2272] -> Set(32768,65525)
[2273] -> Set(32769,65494)
[2274] -> Set(32770,0)
[2275] -> Call(65458)
[2276] -> Set(32768,32770)
[2277] -> Pop(32770)
[2278] -> Pop(32769)
[2279] -> Ret
[2280] -> Push(32771)
[2281] -> Push(32772)
[2282] -> RMem(32771,65452)
[2283] -> Add(32772,32768,2)
[2284] -> RMem(32772,32772)
[2285] -> Eq(32771,32771,32772)
[2286] -> JumpF(32771,65519)
[2287] -> Add(32770,32770,1)
[2288] -> Pop(32772)
[2289] -> Pop(32771)
[2290] -> Ret
[2291] -> Push(32768)
[2292] -> Push(32769)
[2293] -> Set(32768,65525)
[2294] -> Set(32769,5893)
[2295] -> Call(65458)
[2296] -> Pop(32769)
[2297] -> Pop(32768)
[2298] -> Ret
[2299] -> Push(32771)
[2300] -> Add(32771,32768,2)
[2301] -> RMem(32771,32771)
[2302] -> Eq(32771,32770,32771)
[2303] -> JumpF(32771,5918)
[2304] -> Add(32768,32768,0)
[2305] -> RMem(32768,32768)
[2306] -> Call(65462)
[2307] -> Pop(32771)
[2308] -> Ret
[2309] -> Push(32769)
[2310] -> Push(32770)
[2311] -> Set(32770,32768)
[2312] -> Set(32768,65525)
[2313] -> Set(32769,5964)
[2314] -> Call(1543)
[2315] -> Eq(32769,32768,65535)
[2316] -> JumpT(32769,5956)
[2317] -> Add(32769,65525,32768)
[2318] -> Add(32769,32769,1)
[2319] -> RMem(32768,32769)
[2320] -> Jump(5959)
[2321] -> Set(32768,0)
[2322] -> Pop(32770)
[2323] -> Pop(32769)
[2324] -> Ret
[2325] -> Push(32769)
[2326] -> Set(32769,32770)
[2327] -> Add(32768,32768,0)
[2328] -> RMem(32768,32768)
[2329] -> Call(65411)
[2330] -> Pop(32769)
[2331] -> JumpF(32768,5989)
[2332] -> Set(32770,32769)
[2333] -> Set(32769,65535)
[2334] -> Ret
[2335] -> Push(32769)
[2336] -> Push(32770)
[2337] -> Add(32768,32768,2)
[2338] -> RMem(32768,32768)
[2339] -> JumpF(32768,65411)
[2340] -> RMem(32769,65452)
[2341] -> Eq(32769,32768,32769)
[2342] -> JumpT(32769,65411)
[2343] -> Set(32768,0)
[2344] -> Jump(65414)
[2345] -> Set(32768,1)
[2346] -> Pop(32770)
[2347] -> Pop(32769)
[2348] -> Ret
[2349] -> JumpT(32768,65427)
[2350] -> Add(32768,32769,1)
[2351] -> Ret
[2352] -> JumpT(32769,65440)
[2353] -> Add(32768,32768,65535)
[2354] -> Set(32769,32775)
[2355] -> Call(65419)
[2356] -> Ret
[2357] -> Push(32768)
[2358] -> Add(32769,32769,65535)
[2359] -> Call(65419)
[2360] -> Set(32769,32768)
[2361] -> Pop(32768)
[2362] -> Add(32768,32768,65535)
[2363] -> Call(65419)
[2364] -> Ret
[2365] -> In(16435)
[2366] -> Push(65424)
[2367] -> RMem(65525,10070)
[2368] -> Or(24401,14955,6512)
[2369] -> Call(65427)
[2370] -> WMem(65497,65452)
[2371] -> Call(65465)
[2372] -> Gt(11120,21024,65476)
[2373] -> RMem(65441,65484)
[2374] -> Push(65474)
[2375] -> And(65409,18292,65485)
[2376] -> Modulo(65479,65518,31767)
[0m[[32msuccess[0m] [0mTotal time: 0 s, completed Dec 26, 2015 8:00:21 PM[0m
